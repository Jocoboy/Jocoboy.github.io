<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jocoboy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-16T13:44:14.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jocoboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity即时模式GUI</title>
    <link href="http://yoursite.com/2020/01/10/Unity-UI-IMGUI/"/>
    <id>http://yoursite.com/2020/01/10/Unity-UI-IMGUI/</id>
    <published>2020-01-10T11:28:07.000Z</published>
    <updated>2020-01-16T13:44:14.272Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unity’s IMGUI controls make use of a special function called OnGUI(). </span><br><span class="line">The OnGUI() function gets called every frame as long as the containing script is enabled </span><br><span class="line">- just like the Update() function.</span><br></pre></td></tr></table></figure><p>Unity的IMGUI控件使用一个名为OnGUI()的特殊函数。只要启用包含的脚本，就会在每帧调用OnGUI()函数，就像Update()函数一样。</p><a id="more"></a><h2 id="IMGUI控件"><a href="#IMGUI控件" class="headerlink" title="IMGUI控件"></a>IMGUI控件</h2><h3 id="控件类型"><a href="#控件类型" class="headerlink" title="控件类型"></a>控件类型</h3><ul><li><p><strong>Label</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The Label is non-interactive. It is for display only. It cannot be clicked or otherwise moved. </span><br><span class="line">It is best for displaying information only.</span><br></pre></td></tr></table></figure><p>  Label为非交互式控件。此控件仅用于显示目的。不能单击，也不能以其他方式进行移动。此控件最适合于纯粹显示信息之用。</p></li><li><p><strong>Button</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The Button is a typical interactive button. It will respond a single time when clicked, no matter </span><br><span class="line">how long the mouse remains depressed. The response occurs as soon as the mouse button is released.</span><br></pre></td></tr></table></figure><p>  Button是典型的交互式按钮。点击按钮时，无论鼠标按下多久，都只会响应一次。松开鼠标按键后会立即响应。</p></li><li><p><strong>RepeatButton</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RepeatButton is a variation of the regular Button. The difference is, RepeatButton will respond </span><br><span class="line">every frame that the mouse button remains depressed. This allows you to create </span><br><span class="line">click-and-hold functionality.</span><br></pre></td></tr></table></figure><p>  RepeatButton是常规Button的变体。区别在于，RepeatButton将响应鼠标按键保持按下状态的每一帧。由此可以创建单击并保持功能(例如，射击连发功能）。</p></li><li><p><strong>TextField</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The TextField Control is an interactive, editable single-line field containing a text string.</span><br></pre></td></tr></table></figure><p>  TextField控件是一个包含文本字符串的交互式可编辑单行字段。</p></li><li><p><strong>TextArea</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The TextArea Control is an interactive, editable multi-line area containing a text string.</span><br></pre></td></tr></table></figure><p>  TextArea控件是一个包含文本字符串的交互式可编辑多行区域。 </p></li><li><p><strong>Toggle</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The Toggle Control creates a checkbox with a persistent on/off state. </span><br><span class="line">The user can change the state by  clicking on it.</span><br></pre></td></tr></table></figure><p>  Toggle控件创建具有持久开/关状态的复选框。用户可通过点击该复选框来更改状态。</p></li><li><p><strong>Toolbar</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The Toolbar Control is essentially a row of Buttons. Only one of the Buttons on the Toolbar </span><br><span class="line">can be active at a time, and it will remain active until a different Button is clicked. </span><br><span class="line">This behavior emulates the behavior of a typical Toolbar. You can define an arbitrary </span><br><span class="line">number of Buttons on the Toolbar.</span><br></pre></td></tr></table></figure><p>  Toolbar控件本质上是一行Button。在Toolbar上，一次只能有一个Button处于激活状态，并且此Button将一直保持激活状态，直到点击其他Button。此行为模拟典型Toolbar的行为。在Toolbar上可以定义任意数量的Button。</p></li><li><p><strong>SelectionGrid</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The SelectionGrid Control is a multi-row Toolbar. You can determine the </span><br><span class="line">number of columns and rows in the grid. Only one Button can be active at time.</span><br></pre></td></tr></table></figure><p>  SelectionGrid控件是一种多行Toolbar。您可以决定网格中的列数和行数。一次只能激活一个Button。</p></li><li><p><strong>HorizontalSlider</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The HorizontalSlider Control is a typical horizontal sliding knob that can be </span><br><span class="line">dragged to change a value between predetermined min and max values.</span><br></pre></td></tr></table></figure><p>  HorizontalSlider控件是一个典型的水平滑钮，可拖动该滑钮来更改介于预定最小值和最大值之间的值。</p></li><li><p><strong>VerticalSlider</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The VerticalSlider Control is a typical vertical sliding knob that can be </span><br><span class="line">dragged to change a value between predetermined min and max values.</span><br></pre></td></tr></table></figure><p>  VerticalSlider控件是一个典型的垂直滑钮，可拖动该滑钮来更改介于预定最小值和最大值之间的值。</p></li><li><p><strong>HorizontalScrollbar</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The HorizontalScrollbar Control is similar to a Slider Control, but visually </span><br><span class="line">similar to Scrolling elements for web browsers or word processors. This control </span><br><span class="line">is used to navigate the ScrollView Control.</span><br></pre></td></tr></table></figure><p>  HorizontalScrollbar控件类似于Slider控件，但在视觉上类似于Web浏览器或文字处理程序的滚动元素。此控件用于导航 ScrollView 控件。</p></li></ul><ul><li><p><strong>VerticalScrollbar</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The VerticalScrollbar Control is similar to a Slider Control, but visually </span><br><span class="line">similar to Scrolling elements for web browsers or word processors. This control </span><br><span class="line">is used to navigate the ScrollView Control.</span><br></pre></td></tr></table></figure><p>  VerticalScrollbar控件类似于Slider控件，但在视觉上类似于Web浏览器或文字处理程序的滚动元素。此控件用于导航 ScrollView 控件。</p></li><li><p><strong>ScrollView</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ScrollViews are Controls that display a viewable area of a much larger set of Controls.</span><br></pre></td></tr></table></figure><p>  ScrollView控件可显示一个包含更大控件集合的可视区域。 </p></li><li><p><strong>Window</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows are drag-able containers of Controls. They can receive and lose focus when clicked. </span><br><span class="line">Because of this, they are implemented slightly differently from the other Controls. </span><br><span class="line">Each Window has an id number, and its contents are declared inside a separate function </span><br><span class="line">that is called when the Window has focus.</span><br></pre></td></tr></table></figure><p>  Window是可拖动的控件容器。点击时，Window可获得和失去焦点。因此，实现方式与其他控件略有不同。每个Window都有一个 id编号，并且其内容在一个单独的函数内声明，该函数在Window获得焦点时调用。</p></li></ul><h3 id="控件测试"><a href="#控件测试" class="headerlink" title="控件测试"></a>控件测试</h3><p>为一个GameObject添加IMGUIControls脚本实例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  A simple demo for IMGUI Controls.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IMGUIControls</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> textFieldString = <span class="string">"The TextField Control is an interactive, editable single-line field containing a text string."</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> textAreaString = <span class="string">"The TextArea Control is an interactive, editable multi-line area containing a text string."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> toggleBool = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toolbarInt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] toolbarStrings = &#123; <span class="string">"Toolbar 1"</span>, <span class="string">"Toolbar 2"</span>, <span class="string">"Toolbar 3"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> selectionGridInt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] selectionStrings = &#123; <span class="string">"Grid 1"</span>, <span class="string">"Grid 2"</span>, <span class="string">"Grid 3"</span>, <span class="string">"Grid 4"</span>, <span class="string">"Grid 5"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> hSliderValue = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> vSliderValue = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> hScrollbarValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> vScrollbarValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 scrollViewVector = Vector2.zero;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> innerText = <span class="string">"ScrollViews are Controls that display a viewable area of a much larger set of Controls."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rect windowRect = <span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">240</span>, <span class="number">200</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WindowFunction</span>(<span class="params"><span class="keyword">int</span> windowID</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//print("WindowFunction called");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        GUI.Label(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">20</span>), <span class="string">"Label"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In UnityGUI, Buttons will return true when they are clicked. </span></span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">50</span>), <span class="string">"Button"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">"Button"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In UnityGUI, RepeatButtons will return true for every frame that they are clicked.</span></span><br><span class="line">        <span class="keyword">if</span> (GUI.RepeatButton(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">110</span>, <span class="number">200</span>, <span class="number">50</span>), <span class="string">"RepeatButton"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">"RepeatButton"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When edits are made to the string, the TextField function will return the edited string.</span></span><br><span class="line">        textFieldString = GUI.TextField(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">170</span>, <span class="number">200</span>, <span class="number">50</span>), textFieldString);</span><br><span class="line">        <span class="comment">// When edits are made to the string, the TextArea function will return the edited string.</span></span><br><span class="line">        textAreaString = GUI.TextArea(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">230</span>, <span class="number">200</span>, <span class="number">50</span>), textAreaString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The Toggle function will return a new boolean value if it is clicked. </span></span><br><span class="line">        <span class="comment">// In order to capture this interactivity, you must assign the boolean to accept the return value of the Toggle function.</span></span><br><span class="line">        toggleBool = GUI.Toggle(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">280</span>, <span class="number">200</span>, <span class="number">30</span>), toggleBool, <span class="string">"Toggle"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// To make the Toolbar interactive, you must assign the integer to the return value of the function. </span></span><br><span class="line">        <span class="comment">// The number of elements in the content array that you provide will determine the number of Buttons that are shown in the Toolbar.</span></span><br><span class="line">        toolbarInt = GUI.Toolbar(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">310</span>, <span class="number">200</span>, <span class="number">50</span>), toolbarInt, toolbarStrings);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// To make the SelectionGrid interactive, you must assign the integer to the return value of the function. </span></span><br><span class="line">        <span class="comment">// The number of elements in the content array that you provide will determine the number of Buttons that are shown in the SelectionGrid.</span></span><br><span class="line">        selectionGridInt = GUI.SelectionGrid(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">360</span>, <span class="number">200</span>, <span class="number">60</span>), selectionGridInt, selectionStrings, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        hSliderValue = GUI.HorizontalSlider(<span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>), hSliderValue, <span class="number">0.0f</span>, <span class="number">10.0f</span>);</span><br><span class="line">        vSliderValue = GUI.VerticalSlider(<span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">30</span>), vSliderValue, <span class="number">10.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">        hScrollbarValue = GUI.HorizontalScrollbar(<span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">30</span>), hScrollbarValue, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">10.0f</span>);</span><br><span class="line">        vScrollbarValue = GUI.VerticalScrollbar(<span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">30</span>), vScrollbarValue, <span class="number">1.0f</span>, <span class="number">10.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ScrollViews require two Rects as arguments. </span></span><br><span class="line">        <span class="comment">// The first Rect defines the location and size of the viewable ScrollView area on the screen. </span></span><br><span class="line">        <span class="comment">// The second Rect defines the size of the space contained inside the viewable area. </span></span><br><span class="line">        <span class="comment">// If the space inside the viewable area is larger than the viewable area, Scrollbars will appear as appropriate. </span></span><br><span class="line">        <span class="comment">// You must also assign and provide a 2D Vector which stores the position of the viewable area that is displayed.</span></span><br><span class="line">        scrollViewVector = GUI.BeginScrollView(<span class="keyword">new</span> Rect(<span class="number">220</span>, <span class="number">130</span>, <span class="number">250</span>, <span class="number">100</span>), scrollViewVector, <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>));</span><br><span class="line">        innerText = GUI.TextArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>), innerText);</span><br><span class="line">        GUI.EndScrollView();</span><br><span class="line"></span><br><span class="line">        windowRect = GUI.Window(<span class="number">0</span>, windowRect, WindowFunction, <span class="string">"My Window"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// To detect if the user did any action in the GUI (clicked a button, dragged a slider, etc), read the GUI.changed value from your script. </span></span><br><span class="line">        <span class="comment">// This gets set to true when the user has done something, making it easy to validate the user input.</span></span><br><span class="line">        <span class="keyword">if</span> (GUI.changed)</span><br><span class="line">        &#123;</span><br><span class="line">            print(<span class="string">"The toolbar was clicked"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (toolbarInt)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"First button was clicked"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    print(<span class="string">"Second button was clicked"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    print(<span class="string">"Third button was clicked"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/IMGUI/Controls_demo.png" alt="Controls demo"><h2 id="IMGUI布局模式"><a href="#IMGUI布局模式" class="headerlink" title="IMGUI布局模式"></a>IMGUI布局模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Depending on which Layout Mode you’re using, there are different hooks for controlling where your </span><br><span class="line">Controls are positioned and how they are grouped together. In Fixed Layout, </span><br><span class="line">you can put different Controls into Groups. In Automatic Layout, you can put different Controls </span><br><span class="line">into Areas, Horizontal Groups, and Vertical Groups.</span><br></pre></td></tr></table></figure><p>根据使用的布局模式，可通过不同的挂钩来控制控件的位置以及控件如何组合在一起。在固定布局中，可将不同的控件放入组中。在自动布局中，可将不同的控件放入区域、水平组和垂直组中。</p><h3 id="固定布局"><a href="#固定布局" class="headerlink" title="固定布局"></a>固定布局</h3><ul><li><p><strong>Fixed Layout - Groups</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Groups are a convention available in Fixed Layout Mode. They allow you to define areas of the </span><br><span class="line">screen that contain multiple Controls. You define which Controls are inside a Group by </span><br><span class="line">using the GUI.BeginGroup() and GUI.EndGroup() functions. All Controls inside a Group will be positioned </span><br><span class="line">based on the Group’s top-left corner instead of the screen’s top-left corner. This way, if you </span><br><span class="line">reposition the group at runtime, the relative positions of all Controls in the group will be maintained.</span><br></pre></td></tr></table></figure><p>  组是固定布局模式中的布局规则。使用组可以定义包含多个控件的屏幕区域。为定义组中包含的控件，需要使用 GUI.BeginGroup()和GUI.EndGroup()函数。组内的所有控件将根据组的左上角而不是屏幕的左上角进行定位。因此，如果在运行时重新定位组，则将保持组中所有控件的相对位置。</p></li></ul><h3 id="自动布局"><a href="#自动布局" class="headerlink" title="自动布局"></a>自动布局</h3><ul><li><p><strong>Automatic Layout - Areas</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Areas are used in Automatic Layout mode only. They are similar to Fixed Layout Groups in functionality, </span><br><span class="line">as they define a finite portion of the screen to contain GUILayout Controls. Because of </span><br><span class="line">the nature of Automatic Layout, you will nearly always use Areas.</span><br><span class="line"></span><br><span class="line">In Automatic Layout mode, you do not define the area of the screen where the Control will be drawn </span><br><span class="line">at the Control level. The Control will automatically be placed at the upper-leftmost point of </span><br><span class="line">its containing area. This might be the screen. You can also create manually-positioned Areas. </span><br><span class="line">GUILayout Controls inside an area will be placed at the upper-leftmost point of that area.</span><br></pre></td></tr></table></figure><p>  区域仅用于自动布局模式。区域定义了有限的屏幕区域来包含 GUILayout 控件，因此在功能上类似于固定布局组。由于自动布局的性质，几乎始终要用到区域。<br>  在自动布局模式下，不需要在控制级别定义绘制控件的屏幕区域。控件将自动放置在包含该控件的区域的最左上角。此区域可能是指屏幕。此外也可以创建手动定位的区域。一个区域内的GUILayout控件将放置在该区域的最左上角。</p></li><li><p><strong>Automatic Layout - Horizontal and Vertical Groups</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">When using Automatic Layout, Controls will by default appear one after another from top to bottom. </span><br><span class="line">There are plenty of occasions you will want finer level of control over where your Controls are </span><br><span class="line">placed and how they are arranged. If you are using the Automatic Layout mode, you have the </span><br><span class="line">option of Horizontal and Vertical Groups.</span><br><span class="line"></span><br><span class="line">Like the other layout Controls, you call separate functions to start or end these groups. The </span><br><span class="line">specific functions are GUILayout.BeginHorizontal(), GUILayout.EndHorizontal(), </span><br><span class="line">GUILayout.BeginVertical(), and GUILayout.EndVertical().</span><br><span class="line"></span><br><span class="line">Any Controls inside a Horizontal Group will always be laid out horizontally. Any Controls </span><br><span class="line">inside a Vertical Group will always be laid out vertically. This sounds plain until </span><br><span class="line">you start nesting groups inside each other. This allows you to arrange any number </span><br><span class="line">of controls in any imaginable configuration.</span><br></pre></td></tr></table></figure><p> 使用自动布局时，默认情况下控件将从上到下依次出现。在很多情况下，需要更精确控制控件的放置位置以及排列方式。如果使用自动布局模式，则可以选择水平和垂直组。<br> 与其他布局控件一样，可以调用单独的函数来开始或结束这些组。这些函数为 GUILayout.BeginHoriztontal()、GUILayout.EndHorizontal()、GUILayout.BeginVertical() 和 GUILayout.EndVertical()。<br> 水平组内的所有控件都将始终采用水平布局方式。垂直组内的所有控件都将始终采用垂直布局方式。这听起来很简单，但若要将组嵌套在彼此内部，就不那么简单了。通过嵌套的方式可在任何能够想象的配置中排列任意数量的控件。</p></li></ul><h3 id="布局测试"><a href="#布局测试" class="headerlink" title="布局测试"></a>布局测试</h3><p>为一个GameObject添加IMGUILayoutModes脚本实例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>  A simple demo for IMGUI Layout Modes.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IMGUILayoutModes</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Texture2D bgImage;</span><br><span class="line">    <span class="keyword">public</span> Texture2D fgImage;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> playerEnergy = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> sliderValue = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> maxSliderValue = <span class="number">10.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// You define which Controls are inside a Group by using the GUI.BeginGroup() and GUI.EndGroup() functions. </span></span><br><span class="line">        GUI.BeginGroup(<span class="keyword">new</span> Rect(Screen.width / <span class="number">2</span> - <span class="number">50</span>, Screen.height / <span class="number">2</span> - <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">        GUI.Box(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>), <span class="string">"Group is here"</span>);</span><br><span class="line">        GUI.Button(<span class="keyword">new</span> Rect(<span class="number">10</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">30</span>), <span class="string">"Click me"</span>);</span><br><span class="line">        GUI.EndGroup();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// You can also nest multiple Groups inside each other. </span></span><br><span class="line">        <span class="comment">// When you do this, each group has its contents clipped to its parent’s space.</span></span><br><span class="line">        GUI.BeginGroup(<span class="keyword">new</span> Rect(Screen.width / <span class="number">2</span> <span class="number">-128</span> ,Screen.height / <span class="number">2</span> +<span class="number">116</span>,  <span class="number">256</span>, <span class="number">32</span>));</span><br><span class="line">        GUI.Box(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">32</span>), bgImage);</span><br><span class="line">            GUI.BeginGroup(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, playerEnergy * <span class="number">256</span>, <span class="number">32</span>));</span><br><span class="line">            GUI.Box(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">32</span>), fgImage);</span><br><span class="line">            GUI.EndGroup();</span><br><span class="line">        GUI.EndGroup();</span><br><span class="line"></span><br><span class="line">        GUILayout.Button(<span class="string">"I am not inside an Area"</span>);</span><br><span class="line">        GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, Screen.height / <span class="number">2</span>, <span class="number">300</span>, <span class="number">300</span>));</span><br><span class="line">        <span class="comment">// Notice that inside an Area, Controls with visible elements like Buttons and Boxes will stretch their width to the full length of the Area.</span></span><br><span class="line">        GUILayout.Button(<span class="string">"I am a regular Automatic Layout Button"</span>);</span><br><span class="line">        <span class="comment">// You can use GUILayoutOptions to override some of the Automatic Layout parameters. </span></span><br><span class="line">        <span class="comment">// You do this by providing the options as the final parameters of the GUILayout Control.</span></span><br><span class="line">        GUILayout.Button(<span class="string">"My width has been overridden"</span>, GUILayout.Width(<span class="number">200</span>));</span><br><span class="line">        GUILayout.EndArea();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Using nested Horizontal and Vertical Groups.</span></span><br><span class="line">        GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">400</span>, <span class="number">200</span>, <span class="number">60</span>));</span><br><span class="line">            GUILayout.BeginHorizontal();</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.RepeatButton(<span class="string">"Increase max\nSlider Value"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                maxSliderValue += <span class="number">3.0f</span> * Time.deltaTime;</span><br><span class="line">            &#125;</span><br><span class="line">                GUILayout.BeginVertical();</span><br><span class="line">                GUILayout.Box(<span class="string">"Slider Value: "</span> + Mathf.Round(sliderValue));</span><br><span class="line">                sliderValue = GUILayout.HorizontalSlider(sliderValue, <span class="number">0.0f</span>, maxSliderValue);</span><br><span class="line">                GUILayout.EndVertical();</span><br><span class="line">            GUILayout.EndHorizontal();</span><br><span class="line">        GUILayout.EndArea();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/IMGUI/LayoutModes_demo.png" alt="LayoutModes demo"><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://docs.unity3d.com/Manual/GUIScriptingGuide.html" target="_blank" rel="noopener">Immediate Mode GUI (IMGUI)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Unity’s IMGUI controls make use of a special function called OnGUI(). &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The OnGUI() function gets called every frame as long as the containing script is enabled &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- just like the Update() function.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Unity的IMGUI控件使用一个名为OnGUI()的特殊函数。只要启用包含的脚本，就会在每帧调用OnGUI()函数，就像Update()函数一样。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
      <category term="C#" scheme="http://yoursite.com/categories/Unity/C/"/>
    
    
      <category term="Unity-UI" scheme="http://yoursite.com/tags/Unity-UI/"/>
    
  </entry>
  
  <entry>
    <title>Unity自定义天空盒</title>
    <link href="http://yoursite.com/2020/01/06/Unity-Graphics-Skybox/"/>
    <id>http://yoursite.com/2020/01/06/Unity-Graphics-Skybox/</id>
    <published>2020-01-06T13:02:25.000Z</published>
    <updated>2020-01-11T08:34:32.861Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A Skybox is a six-sided cube that Unity draws behind all graphics in the Scene.</span><br></pre></td></tr></table></figure><p>一个天空盒是一个六面立方体，会将游戏场景中的所有图形包裹。</p><a id="more"></a><h2 id="自定义天空盒"><a href="#自定义天空盒" class="headerlink" title="自定义天空盒"></a>自定义天空盒</h2><h3 id="6-sided"><a href="#6-sided" class="headerlink" title="6-sided"></a>6-sided</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>6张TIFF/TIF格式(具有跨平台性)的方位局部图，1024×1024px。</p><h4 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol><li>创建与天空盒六个面相对应的六个纹理，将它们放在项目的<code>Assets</code>文件夹中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Make six Textures that correspond to each of the six sides of the skybox, and put them into your</span><br><span class="line">Project’s Assets folder.</span><br></pre></td></tr></table></figure></li></ol><img src="/images/skybox/skybox_textures.png" alt="skybox textures"><ol start="2"><li>对于每个纹理，需要将包裹模式从<code>Repeat</code>更改为<code>Clamp</code>。如果不这样做，边缘上的颜色将不匹配。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">For each Texture, you need to change the wrap mode from Repeat to Clamp.</span><br><span class="line">If you don’t do this, colors on the edges do not match up.</span><br></pre></td></tr></table></figure></li></ol><img src="/images/skybox/wrap_mode.png" alt="wrap mode"><ol start="3"><li><p>从菜单栏中选择<code>Assets &gt; Create &gt; Material</code>以创建新材质。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Create a new Material. To do this, choose Assets &gt; Create &gt; Material from the menu bar.</span><br></pre></td></tr></table></figure></li><li><p>在<code>Inspector</code>面板的顶部选择<code>Shader</code>下拉选单，然后选择<code>Skybox/6 Sided</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select the Shader drop-down and choose Skybox/6 Sided.</span><br></pre></td></tr></table></figure></li><li><p>将6个纹理分配给材质中的每个纹理字段。为此，可将每个纹理从<code>Project</code>面板拖放到相应的字段上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assign the six Textures to each Texture slot in the Material. </span><br><span class="line">To do this, you can drag each Texture from the Project View onto the corresponding slots.</span><br></pre></td></tr></table></figure></li></ol><img src="/images/skybox/skybox_inspector_01.png" alt="skybox inspector 01"><ol start="6"><li>最后，将天空盒分配给当前场景，须执行以下操作：<ul><li>在菜单栏中选择<code>Window &gt; Rendering &gt; Lighting Settings</code>。</li><li>在随后出现的窗口中选择Scene选项卡。</li><li>将新的天空盒材质拖放到<code>Skybox</code>字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To assign the skybox to the Scene you’re working on:</span><br><span class="line"></span><br><span class="line">- From the menu bar, choose Window &gt; Rendering &gt; Lighting Settings.</span><br><span class="line">- In the window that appears, select the Scene tab.</span><br><span class="line">- Drag the new Skybox Material to the Skybox slot.</span><br></pre></td></tr></table></figure></li></ul></li></ol><img src="/images/skybox/skybox_application.png" alt="skybox application"><h3 id="panoramic"><a href="#panoramic" class="headerlink" title="panoramic"></a>panoramic</h3><h4 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h4><p>1张png格式的（360°/720°）全景图，2048×1024px/4096×2048px。</p><img src="/images/skybox/skybox_panoramic.png" alt="skybox panoramic"><h4 id="创建步骤-1"><a href="#创建步骤-1" class="headerlink" title="创建步骤"></a>创建步骤</h4><p>步骤1~3及步骤6同6-sided。</p><ol start="4"><li><p>在<code>Inspector</code>面板的顶部选择<code>Shader</code>下拉选单，然后选择<code>Skybox/Panoramic</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select the Shader drop-down and choose Skybox/Panoramic.</span><br></pre></td></tr></table></figure></li><li><p>为材质选择一个球状纹理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assign a Spherical Texture to the Material.</span><br></pre></td></tr></table></figure></li></ol><img src="/images/skybox/skybox_inspector_02.png" alt="skybox inspector 02"><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://docs.unity3d.com/Manual/HOWTO-UseSkybox.html" target="_blank" rel="noopener">How do I Make a Skybox?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A Skybox is a six-sided cube that Unity draws behind all graphics in the Scene.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个天空盒是一个六面立方体，会将游戏场景中的所有图形包裹。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
      <category term="C#" scheme="http://yoursite.com/categories/Unity/C/"/>
    
    
      <category term="Unity-Graphics" scheme="http://yoursite.com/tags/Unity-Graphics/"/>
    
  </entry>
  
  <entry>
    <title>Unity脚本生命周期</title>
    <link href="http://yoursite.com/2020/01/04/Unity-Script-Lifecycle/"/>
    <id>http://yoursite.com/2020/01/04/Unity-Script-Lifecycle/</id>
    <published>2020-01-04T15:07:14.000Z</published>
    <updated>2020-01-16T12:25:29.955Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Running a Unity script executes a number of event functions in a predetermined order.</span><br></pre></td></tr></table></figure><p>一个Unity脚本中的事件函数将会以预定顺序执行。</p><a id="more"></a><h2 id="脚本生命周期"><a href="#脚本生命周期" class="headerlink" title="脚本生命周期"></a>脚本生命周期</h2><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>下图总结了脚本生命周期中事件函数的排序和重复出现情况。</p><img src="/images/lifecycle/monobehaviour_flowchart.svg" alt="monobehaviour flowchart"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p><strong>Awake</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This function is always called before any Start functions and also just after a prefab is instantiated.</span><br></pre></td></tr></table></figure><p>  此函数将在预制件实例化之后调用，并始终优先于任何Start函数。</p></li><li><p><strong>OnEnable</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This function is called just after the object is enabled. This happens when a MonoBehaviour </span><br><span class="line">instance is created, such as when a level is loaded or a GameObject with the script component </span><br><span class="line">is instantiated.</span><br></pre></td></tr></table></figure><p>  此函数将在启用对象后立即调用。在创建MonoBehaviour实例时（例如加载关卡或一个携带脚本组件的游戏对象被实例化时）会执行此调用。</p></li><li><p><strong>Reset</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Reset is called to initialize the script’s properties when it is first attached to the object</span><br><span class="line">and also when the Reset command is used.</span><br></pre></td></tr></table></figure><p>  此函数将在脚本首次被附加到对象上以及使用<code>Reset</code>命令时调用，以初始化脚本的属性。</p></li><li><p><strong>Start</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start is called before the first frame update only if the script instance is enabled.</span><br></pre></td></tr></table></figure><p>  此函数将紧跟Awake函数调用，确切来说是在第一此帧更新前并且此时脚本实例已被启用。</p></li><li><p><strong>FixedUpdate</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FixedUpdate is often called more frequently than Update. </span><br><span class="line">It can be called multiple times per frame, if the frame rate is low and it may not be called </span><br><span class="line">between frames at all if the frame rate is high. </span><br><span class="line">All physics calculations and updates occur immediately after FixedUpdate. </span><br><span class="line">When applying movement calculations inside FixedUpdate, you do not need to multiply your values </span><br><span class="line">by Time.deltaTime. </span><br><span class="line">This is because FixedUpdate is called on a reliable timer, independent of the frame rate.</span><br></pre></td></tr></table></figure><p>  调用FixedUpdate的频度常常超过Update。如果帧率很低，可以每帧调用该函数多次；如果帧率很高，可能在帧之间完全不调用该函数。在FixedUpdate之后将立即进行所有物理计算和更新。在FixedUpdate内应用运动计算时，无需将值乘以 <code>Time.deltaTime</code>。这是因为FixedUpdate的调用基于可靠的计时器（独立于帧率）。</p></li><li><p><strong>Update</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Update is called once per frame. It is the main workhorse function for frame updates.</span><br></pre></td></tr></table></figure><p>  此函数是帧更新的主函数，受当前渲染物体和机器性能影响，被调用的时间间隔不固定。</p></li><li><p><strong>Coroutines</strong>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Normal coroutine updates are run after the Update function returns. A coroutine is a function </span><br><span class="line">that can suspend its execution (yield) until the given YieldInstruction finishes. </span><br><span class="line">Different uses of Coroutines:</span><br><span class="line"></span><br><span class="line">- yield The coroutine will continue after all Update functions have been called on the next frame.</span><br><span class="line">- yield WaitForSeconds Continue after a specified time delay, after all Update functions have </span><br><span class="line">been called for the frame</span><br><span class="line">- yield WaitForFixedUpdate Continue after all FixedUpdate has been called on all scripts</span><br><span class="line">- yield WWW Continue after a WWW download has completed.</span><br><span class="line">- yield StartCoroutine Chains the coroutine, and will wait for the MyFunc coroutine to complete first.</span><br></pre></td></tr></table></figure><p>  Update函数返回后将运行正常协程更新。协程是一个可暂停执行(yield)直到给定的YieldInstruction达到完成状态的函数。协程的不同用法：</p><ul><li><strong>yield</strong> 协程将在下一帧上调用所有Update函数后，继续执行。</li><li><strong>yield WaitForSeconds</strong> 协程将在指定的时间延迟后（并且当前帧所有Update函数执行后），继续执行。</li><li><strong>yield WaitForFixedUpdate</strong> 协程将在所有脚本的FixedUpdate函数执行后，继续执行。</li><li><strong>yield WWW</strong> 协程将在WWW资源下载完成后，继续执行。</li><li><strong>yield StartCoroutine</strong> 协程将在指定协程执行后，继续执行。</li></ul></li><li><p><strong>LateUpdate</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LateUpdate is called once per frame, after Update has finished.</span><br></pre></td></tr></table></figure><p>  此函数将紧跟Update函数调用，通常用于伴随逻辑的跟踪。</p></li><li><p><strong>OnApplicationPause</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is called at the end of the frame where the pause is detected, effectively between the </span><br><span class="line">normal frame updates. One extra frame will be issued after OnApplicationPause is called to </span><br><span class="line">allow the game to show graphics that indicate the paused state.</span><br></pre></td></tr></table></figure><p>  在帧的结尾处调用此函数（在正常帧更新之间有效检测到暂停）。在调用OnApplicationPause之后，将发出一个额外帧，从而允许游戏显示图形来指示暂停状态。</p></li><li><p><strong>OnApplicationQuit</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This function is called on all game objects before the application is quit. </span><br><span class="line">In the editor it is called when the user stops playmode.</span><br></pre></td></tr></table></figure><p>  此函数将在应用退出之前调用，例如在Editor中再次点击<code>Play</code>按钮关闭播放模式。</p></li><li><p><strong>OnDisable</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This function is called when the behaviour becomes disabled or inactive.</span><br></pre></td></tr></table></figure><p>  此函数将在行为被禁用或处于非活动状态时调用，例如OnApplicationQuit函数调用之后。</p></li><li><p><strong>OnDestroy</strong>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This function is called after all frame updates for the last frame of the object’s existence </span><br><span class="line">(the object might be destroyed in response to Object.Destroy or at the closure of a scene).</span><br></pre></td></tr></table></figure><p>  此函数将在对象存在的最后一帧完成所有帧更新之后调用，可能应<code>Object.Destroy</code>函数要求或在场景关闭时销毁该对象。</p></li></ul><h3 id="函数执行顺序测试"><a href="#函数执行顺序测试" class="headerlink" title="函数执行顺序测试"></a>函数执行顺序测试</h3><p>（以下测试<strong>不包含</strong>协程函数）<br>为一个Cube物体添加Lifecycle脚本组件。</p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Simple demo for script lifecycle .</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lifecycle</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : Awake() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : OnEnable() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : Reset() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : Start() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Time.time &lt; <span class="number">0.1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"Function : FixedUpdate() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private void OnMouseDown()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     Debug.Log("Function : OnMouseDown() " + "Time : " + Time.time + " Object.name : " + this.name);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Time.time &lt; <span class="number">0.1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"Function : Update() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Time.time &lt; <span class="number">0.1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"Function : LateUpdate() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private void OnGUI()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     if (Time.time &lt; 0.1)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Debug.Log("Function : OnGUI() " + "Time : " + Time.time + " Object.name : " + this.name);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationPause</span>(<span class="params"><span class="keyword">bool</span> pause = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pause)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"Function : OnApplicationPause() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : OnApplicationQuit() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : OnDisable() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"Function : OnDestroy() "</span> + <span class="string">"Time : "</span> + Time.time + <span class="string">" Object.name : "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><img src="/images/lifecycle/lifecycle_demo.png" alt="lifecycle demo"><h4 id="测试反馈"><a href="#测试反馈" class="headerlink" title="测试反馈"></a>测试反馈</h4><p>控制台输出结果表明，运行场景时在Editor中点击<code>Pause</code>按钮将不会调用OnApplicationPause函数。</p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://docs.unity3d.com/Manual/ExecutionOrder.html" target="_blank" rel="noopener">Order of Execution for Event Functions</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Running a Unity script executes a number of event functions in a predetermined order.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个Unity脚本中的事件函数将会以预定顺序执行。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://yoursite.com/categories/Unity/"/>
    
      <category term="C#" scheme="http://yoursite.com/categories/Unity/C/"/>
    
    
      <category term="Unity-Scripting" scheme="http://yoursite.com/tags/Unity-Scripting/"/>
    
  </entry>
  
</feed>
