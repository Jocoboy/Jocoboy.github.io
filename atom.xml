<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jocoboy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T07:39:35.553Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jocoboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无向图的割点与桥</title>
    <link href="http://yoursite.com/2019/06/22/%E6%97%A0%E5%90%91%E5%9B%BE%E7%9A%84%E5%89%B2%E7%82%B9%E4%B8%8E%E6%A1%A5/"/>
    <id>http://yoursite.com/2019/06/22/无向图的割点与桥/</id>
    <published>2019-06-22T15:41:37.000Z</published>
    <updated>2019-08-02T07:39:35.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无向图求割点"><a href="#无向图求割点" class="headerlink" title="无向图求割点"></a>无向图求割点</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>割点：无向连通图中，如果删除某点后，图的连通性被破坏，则称该点为割点</li></ul><h3 id="Tarjan算法应用"><a href="#Tarjan算法应用" class="headerlink" title="Tarjan算法应用"></a>Tarjan算法应用</h3><p><a href="https://www.luogu.org/problemnew/show/P3388" target="_blank" rel="noopener">src: luogu</a></p><p><strong>题意</strong>：给定无向图G。求总割点数，并按字典序输出所有割点。</p><p><strong>题解</strong>：利用Tarjan算法思想。</p><ol><li>当前节点为树根时，如果子树不止一棵，则该点为割点</li><li>当前节点不是树根时，如果无向边(u, v)为树边(父子边)且low[v]&gt;=dfn[u] (不成环)，则该点为割点<a id="more"></a></li></ol><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits\stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N * <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> low[N];</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cutPointNum;</span><br><span class="line">    <span class="keyword">bool</span> cutPoint[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printCutPoint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    cutPointNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        low[i] = <span class="number">0</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        cutPoint[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum * <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[i].to = v;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i;</span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        edge[i].to = u;</span><br><span class="line">        edge[i].next = head[v];</span><br><span class="line">        head[v] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(i, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Tarjan(<span class="keyword">int</span> u, <span class="keyword">int</span> root)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> children = <span class="number">0</span>;</span><br><span class="line">    low[u] = dfn[u] = ++tot;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(v, root);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">            <span class="keyword">if</span> (u != root &amp;&amp; low[v] &gt;= dfn[u])</span><br><span class="line">            &#123;</span><br><span class="line">                cutPoint[u] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (u == root)</span><br><span class="line">            &#123;</span><br><span class="line">                children++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == root &amp;&amp; children &gt;= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cutPoint[root] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::printCutPoint()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cutPoint[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cutPointNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cutPointNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cutPoint[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.findSCC();</span><br><span class="line">    G.printCutPoint();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无向图求桥"><a href="#无向图求桥" class="headerlink" title="无向图求桥"></a>无向图求桥</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>桥：无向连通图中，如果删除某边后，图的连通性被破坏，则称该边为桥</li></ul><h3 id="Tarjan算法应用-1"><a href="#Tarjan算法应用-1" class="headerlink" title="Tarjan算法应用"></a>Tarjan算法应用</h3><p><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=737" target="_blank" rel="noopener">src: uva</a></p><p><strong>题意</strong>：给定无向图G。求总桥数，并按字典序输出所有桥。</p><p><strong>题解</strong>：利用Tarjan算法思想。</p><ul><li>当且仅当无向边(u, v)为树边(父子边)且low[v]&gt;dfn[u] (不成环)时，该边为桥</li></ul><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits\stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> from;</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> low[N];</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cutEdgeNum;</span><br><span class="line">    <span class="keyword">int</span> cutEdge[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n) : vertexNum(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printCutEdge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    cutEdgeNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        low[i] = <span class="number">0</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        cutEdge[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, n, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">            edge[cnt].from = u;</span><br><span class="line">            edge[cnt].to = v;</span><br><span class="line">            edge[cnt].next = head[u];</span><br><span class="line">            head[u] = cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">            Tarjan(i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Tarjan(<span class="keyword">int</span> u, <span class="keyword">int</span> parent)</span><br><span class="line">&#123;</span><br><span class="line">    low[u] = dfn[u] = ++tot;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == parent)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            Tarjan(v, u);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v] &gt; dfn[u]) &#123;</span><br><span class="line">                cutEdge[++cutEdgeNum] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::printCutEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cutEdgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = cutEdge[i];</span><br><span class="line">        <span class="keyword">if</span> (edge[j].from &gt; edge[j].to) &#123;</span><br><span class="line">            swap(edge[j].from, edge[j].to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(cutEdge + <span class="number">1</span>, cutEdge + <span class="number">1</span> + cutEdgeNum, [&amp;](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;<span class="keyword">if</span>(edge[a].from != edge[b].from) <span class="keyword">return</span> edge[a].from &lt; edge[b].from; <span class="keyword">return</span> edge[a].to &lt; edge[b].to; &#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cutEdgeNum &lt;&lt; <span class="string">" critical links"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cutEdgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = cutEdge[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; edge[j].from &lt;&lt; <span class="string">" - "</span> &lt;&lt; edge[j].to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">        G.init();</span><br><span class="line">        G.addEdge();</span><br><span class="line">        G.findSCC();</span><br><span class="line">        G.printCutEdge();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;无向图求割点&quot;&gt;&lt;a href=&quot;#无向图求割点&quot; class=&quot;headerlink&quot; title=&quot;无向图求割点&quot;&gt;&lt;/a&gt;无向图求割点&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;割点：无向连通图中，如果删除某点后，图的连通性被破坏，则称该点为割点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Tarjan算法应用&quot;&gt;&lt;a href=&quot;#Tarjan算法应用&quot; class=&quot;headerlink&quot; title=&quot;Tarjan算法应用&quot;&gt;&lt;/a&gt;Tarjan算法应用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3388&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;src: luogu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题意&lt;/strong&gt;：给定无向图G。求总割点数，并按字典序输出所有割点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题解&lt;/strong&gt;：利用Tarjan算法思想。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前节点为树根时，如果子树不止一棵，则该点为割点&lt;/li&gt;
&lt;li&gt;当前节点不是树根时，如果无向边(u, v)为树边(父子边)且low[v]&amp;gt;=dfn[u] (不成环)，则该点为割点
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>矩阵快速幂</title>
    <link href="http://yoursite.com/2019/06/20/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>http://yoursite.com/2019/06/20/矩阵快速幂/</id>
    <published>2019-06-20T15:39:33.000Z</published>
    <updated>2019-08-04T04:55:32.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>单位矩阵：主对角线元素全为1，其余元素全为0的矩阵，充当数乘运算中的1</li><li>矩阵乘积：$C(c_{ij}) = A(a_{ik}) * B(b_{kj})$, 其中$c_{ij}= \displaystyle\sum_{k=1}^{n}a_{ik} * b_{kj}$</li><li>快速幂：计算$a^n$时，将指数n转化为二进制数，记第i位为$k_i$，则$n = \displaystyle\sum_{i=1}^{n}k_i*2^{i-1}$，以此将O(n)的复杂度降至O(logn)<a id="more"></a></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="k步可达路径方案数"><a href="#k步可达路径方案数" class="headerlink" title="k步可达路径方案数"></a>k步可达路径方案数</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2157" target="_blank" rel="noopener">src: HDU</a></p><p><strong>题意</strong>：给定有向图G，给出若干组(A,B,k)。问你从A到B恰好经过k个顶点的方案数。</p><p><strong>题解</strong>：矩阵快速幂模板题。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    T value[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Matrix(<span class="keyword">bool</span> isIdentityMatrix = <span class="literal">false</span>) : n(N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                value[i][j] = T(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isIdentityMatrix)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                value[i][i] = T(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>+(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;T, N&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                ret.value[i][j] = (value[i][j] + b.value[i][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;T, N&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    ret.value[i][j] = (ret.value[i][j] + value[i][k] * b.value[k][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix &amp;<span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">int</span> mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; value[u][v] = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;value[u][v]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">LL</span> <span class="title">n</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function">T <span class="title">ret</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * (n &amp; <span class="number">1</span> ? a : T(<span class="number">1</span>)) % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &amp;&amp; (n + m))</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;LL, <span class="number">25</span>&gt; a, b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            a.setValue(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">cin</span> &gt;&gt; t; t &gt; <span class="number">0</span>; t--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v, k;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; k;</span><br><span class="line">            b = fpow(a, k);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; b.getValue(u, v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fibonacci数列第k项"><a href="#Fibonacci数列第k项" class="headerlink" title="Fibonacci数列第k项"></a>Fibonacci数列第k项</h3><p><a href="http://poj.org/problem?id=3070" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：求Fibonacci数列第k项的后四位(1≤k≤1000000000)。</p><img src="/images/矩阵快速幂_1.png"><p><strong>题解</strong>：根据递推式$F_n=F_{n-1}+F_{n-2}$构造二阶矩阵作为底数。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">int</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    T value[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Matrix(<span class="keyword">bool</span> isIdentityMatrix = <span class="literal">false</span>) : n(N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                value[i][j] = T(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isIdentityMatrix)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                value[i][i] = T(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>+(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;T, N&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                ret.value[i][j] = (value[i][j] + b.value[i][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;T, N&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                    ret.value[i][j] = (ret.value[i][j] + value[i][k] * b.value[k][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix &amp;<span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">int</span> mod)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; value[u][v] = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;value[u][v]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">fpow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">LL</span> <span class="title">n</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function">T <span class="title">ret</span><span class="params">(<span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = ret * (n &amp; <span class="number">1</span> ? a : T(<span class="number">1</span>)) % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix&lt;LL, <span class="number">2</span>&gt; a, b;</span><br><span class="line">        a.setValue(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        a.setValue(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        a.setValue(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        b = fpow(a, n);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b.getValue(<span class="number">0</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单位矩阵：主对角线元素全为1，其余元素全为0的矩阵，充当数乘运算中的1&lt;/li&gt;
&lt;li&gt;矩阵乘积：$C(c_{ij}) = A(a_{ik}) * B(b_{kj})$, 其中$c_{ij}= \displaystyle\sum_{k=1}^{n}a_{ik} * b_{kj}$&lt;/li&gt;
&lt;li&gt;快速幂：计算$a^n$时，将指数n转化为二进制数，记第i位为$k_i$，则$n = \displaystyle\sum_{i=1}^{n}k_i*2^{i-1}$，以此将O(n)的复杂度降至O(logn)
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Number Theory" scheme="http://yoursite.com/categories/C/Algorithm-Number-Theory/"/>
    
    
  </entry>
  
  <entry>
    <title>二分图匹配</title>
    <link href="http://yoursite.com/2019/06/10/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2019/06/10/二分图匹配/</id>
    <published>2019-06-10T15:33:42.000Z</published>
    <updated>2019-08-04T04:55:27.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hungary算法"><a href="#Hungary算法" class="headerlink" title="Hungary算法"></a>Hungary算法</h2><img src="/images/二分图匹配_1.png"><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径。</li><li>增广路：从一个未匹配点出发，沿着交替路途经另一个未匹配点的路径。图中，9-&gt;4-&gt;8-&gt;1-&gt;6-&gt;2就是一条增广路。增广路的非匹配边比匹配边多一条。</li></ol><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>通过寻找增广路，不断交换增广路中的匹配边与非匹配边的身份(相当于添加一条匹配边)，直到找不到增广路为止。</p><a id="more"></a><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决无权二分图最大匹配问题。</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2063" target="_blank" rel="noopener">src: HDU</a></p><p><strong>题意</strong>：给定无权二分图，求最大匹配数。</p><p><strong>题解</strong>：Hungary算法模板题。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">501</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> lvertexNum;</span><br><span class="line">    <span class="keyword">int</span> rvertexNum;</span><br><span class="line">    <span class="keyword">int</span> maxMatch;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> lvertex[N];</span><br><span class="line">    <span class="keyword">int</span> rvertex[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> m, <span class="keyword">int</span> ln, <span class="keyword">int</span> rn) : edgeNum(m), lvertexNum(ln), rvertexNum(rn) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Hungary</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    maxMatch = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(matrix, <span class="number">0</span>, <span class="keyword">sizeof</span>(matrix));</span><br><span class="line">    <span class="built_in">memset</span>(lvertex, <span class="number">0</span>, <span class="keyword">sizeof</span>(lvertex));</span><br><span class="line">    <span class="built_in">memset</span>(rvertex, <span class="number">0</span>, <span class="keyword">sizeof</span>(rvertex));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        matrix[u][v] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Hungary()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lvertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!lvertex[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">if</span> (find(i))</span><br><span class="line">            &#123;</span><br><span class="line">                maxMatch++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxMatch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::find(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= rvertexNum; v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[u][v] &amp;&amp; !vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!rvertex[v] || find(rvertex[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                lvertex[u] = v;</span><br><span class="line">                rvertex[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, ln, rn;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ln &gt;&gt; rn;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(m, ln, rn)</span></span>;</span><br><span class="line">        G.init();</span><br><span class="line">        G.addEdge();</span><br><span class="line">        G.Hungary();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KM算法"><a href="#KM算法" class="headerlink" title="KM算法"></a>KM算法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li>初始化时，将左侧顶点赋值为最大权重，右侧顶点赋值为0。</li><li>用Hungary算法为左侧第i个顶点匹配最大权重边。</li><li>若匹配失败，遍历左右两侧顶点，在已被匹配的左侧顶点与未被匹配的右侧顶点之间寻找最小代价，并根据左右两侧顶点匹配情况降低左侧顶点权重或增加右侧顶点权重，重复步骤(2)，直到该点匹配成功。</li><li>若匹配成功，记录匹配顶点，重复步骤(2)，直到左侧所有顶点都被匹配。</li></ol><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决带权二分图完美匹配下的最优匹配问题。</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2255" target="_blank" rel="noopener">src: HDU</a></p><p><strong>题意</strong>：给定带权二分图，求最大匹配权。</p><p><strong>题解</strong>：KM算法模板题。注意此题卡cin。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">301</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> optMatch;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line">    <span class="keyword">int</span> rvertex[N];</span><br><span class="line">    <span class="keyword">int</span> lexp[N];</span><br><span class="line">    <span class="keyword">int</span> rexp[N];</span><br><span class="line">    <span class="keyword">bool</span> lvis[N];</span><br><span class="line">    <span class="keyword">bool</span> rvis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n) : vertexNum(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KM</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    optMatch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        rvertex[i] = <span class="number">0</span>;</span><br><span class="line">        lexp[i] = INF;</span><br><span class="line">        rexp[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            lexp[i] = max(matrix[i][j], lexp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::KM()</span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> slack = INF;</span><br><span class="line">            <span class="built_in">memset</span>(lvis, <span class="number">0</span>, <span class="keyword">sizeof</span>(lvis));</span><br><span class="line">            <span class="built_in">memset</span>(rvis, <span class="number">0</span>, <span class="keyword">sizeof</span>(rvis));</span><br><span class="line">            <span class="keyword">if</span> (find(i))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lvis[i]) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!rvis[j]) &#123;</span><br><span class="line">                            slack = min(slack, lexp[i] + rexp[j] - matrix[i][j]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lvis[i]) &#123;</span><br><span class="line">                    lexp[i] -= slack;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rvis[i]) &#123;</span><br><span class="line">                    rexp[i] += slack;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        optMatch += matrix[rvertex[i]][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; optMatch &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::find(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    lvis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= vertexNum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!rvis[v] &amp;&amp; lexp[u] + rexp[v] == matrix[u][v]) &#123;</span><br><span class="line">            rvis[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!rvertex[v] || find(rvertex[v])) &#123;</span><br><span class="line">                rvertex[v] = u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line">        G.init();</span><br><span class="line">        G.addEdge();</span><br><span class="line">        G.KM();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hungary算法&quot;&gt;&lt;a href=&quot;#Hungary算法&quot; class=&quot;headerlink&quot; title=&quot;Hungary算法&quot;&gt;&lt;/a&gt;Hungary算法&lt;/h2&gt;&lt;img src=&quot;/images/二分图匹配_1.png&quot;&gt;

&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;交替路：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径。&lt;/li&gt;
&lt;li&gt;增广路：从一个未匹配点出发，沿着交替路途经另一个未匹配点的路径。图中，9-&amp;gt;4-&amp;gt;8-&amp;gt;1-&amp;gt;6-&amp;gt;2就是一条增广路。增广路的非匹配边比匹配边多一条。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;通过寻找增广路，不断交换增广路中的匹配边与非匹配边的身份(相当于添加一条匹配边)，直到找不到增广路为止。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Hungary" scheme="http://yoursite.com/tags/Hungary/"/>
    
      <category term="KM" scheme="http://yoursite.com/tags/KM/"/>
    
  </entry>
  
  <entry>
    <title>k-适定性问题</title>
    <link href="http://yoursite.com/2019/06/04/k-%E9%80%82%E5%AE%9A%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/06/04/k-适定性问题/</id>
    <published>2019-06-04T15:32:29.000Z</published>
    <updated>2019-08-04T02:20:50.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k-sat问题"><a href="#k-sat问题" class="headerlink" title="k-sat问题"></a>k-sat问题</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>给定若干集合，每个集合有若干元素，每个集合元素个数不超过k个。<br>给出从每个集合中选取元素的约束条件以及目标方案，判可行性。若可行，求可行解。</p><p>当k=1时，每个集合中元素的个数至多为1，问题的答案显而易见。<br>当k=2时，假定每个集合中元素有且仅有2个，且2个元素不允许同时被取出，即为2-sat问题的一般情景。<br>当k&gt;=3时，k-sat问题是NP-Complete问题，无法在多项式时间内解决，不作讨论。</p><a id="more"></a><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="2-sat判可行性"><a href="#2-sat判可行性" class="headerlink" title="2-sat判可行性"></a>2-sat判可行性</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3062" target="_blank" rel="noopener">src: HDU</a></p><p><strong>题意</strong>：给定n个集合，每个集合中有2个元素，给定集合间的m对矛盾关系。判从2n个元素中取n个元素的可行性。</p><p><strong>题解</strong>：2-sat裸题。将元素之间的一对矛盾关系转化为顶点之间的一条无向连边，建图后Tarjan算法判图连通性即可。注意此题卡cin。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N * <span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> low[N];</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> SCCNum;</span><br><span class="line">    <span class="keyword">int</span> color[N];</span><br><span class="line">    <span class="comment">//vector&lt;int&gt; SCC[N];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n &lt;&lt; <span class="number">1</span>), edgeNum(m &lt;&lt; <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void print();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    SCCNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        low[i] = <span class="number">0</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, a1, a2, c1, c2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; c1 &gt;&gt; c2;</span><br><span class="line">        u = (a1 &lt;&lt; <span class="number">1</span>) + c1;</span><br><span class="line">        v = (a2 &lt;&lt; <span class="number">1</span>) + c2;</span><br><span class="line"></span><br><span class="line">        edge[i].to = v ^ <span class="number">1</span>;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i++;</span><br><span class="line"></span><br><span class="line">        edge[i].to = u ^ <span class="number">1</span>;</span><br><span class="line">        edge[i].next = head[v];</span><br><span class="line">        head[v] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[i] == color[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Tarjan(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    low[u] = dfn[u] = ++tot;</span><br><span class="line">    st.push(u);</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            Tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        SCCNum++;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            vis[v] = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//SCC[SCCNum].push_back(v);</span></span><br><span class="line">            color[v] = SCCNum;</span><br><span class="line">        &#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void Graph::print()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; SCCNum &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= SCCNum; i++) &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; SCC[i].size(); j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; SCC[i][j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        G.init();</span><br><span class="line">        G.addEdge();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (G.findSCC() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//G.print();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-sat求可行解"><a href="#2-sat求可行解" class="headerlink" title="2-sat求可行解"></a>2-sat求可行解</h4><p><a href="http://codeforces.com/contest/876/problem/E" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定n串数字字符，所有数字不超过m。给出一种标记操作，带上标记的数字字典序将小于一般数字。判若干次操作后可使字符串升序的可行性。若可行，输出可行解。</p><p><strong>题解</strong>：对于相同位置的字符，标记时存在若干对矛盾关系。依次建边后Tarjan算法判图连通性的同时，记录各连通分支中顶点元素的拓扑序列，依据相邻顶点拓扑序输出标记方案。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200001</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; let[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="comment">//int edgeNum;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> low[N];</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">int</span> topo[N];</span><br><span class="line">    <span class="keyword">int</span> SCCNum;</span><br><span class="line">    <span class="keyword">int</span> color[N];</span><br><span class="line">    <span class="comment">//vector&lt;int&gt; SCC[N];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n) : vertexNum(n &lt;&lt; <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void print();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    SCCNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        low[i] = <span class="number">0</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum &amp;&amp; flag; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[i] == color[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (topo[i] &lt; topo[i +<span class="number">1</span>]) &#123;</span><br><span class="line">                ans.push_back((i &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : ans) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Tarjan(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    low[u] = dfn[u] = ++tot;</span><br><span class="line">    st.push(u);</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            Tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        SCCNum++;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            vis[v] = <span class="literal">false</span>;</span><br><span class="line">            color[v] = SCCNum;</span><br><span class="line">            topo[v] = ++sum;</span><br><span class="line">            <span class="comment">//SCC[SCCNum].push_back(v);</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void Graph::print()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; SCCNum &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= SCCNum; i++) &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; SCC[i].size(); j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; SCC[i][j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            let[i].push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> mlen = min(let[i].size(), let[i + <span class="number">1</span>].size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mlen; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = let[i][j] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> v = let[i + <span class="number">1</span>][j] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (u &lt; v) &#123;</span><br><span class="line">                    G.addEdge(u &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, v &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">                    G.addEdge(v &lt;&lt; <span class="number">1</span>, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    G.addEdge(u &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, u &lt;&lt; <span class="number">1</span>);</span><br><span class="line">                    G.addEdge(v &lt;&lt; <span class="number">1</span>, v &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag &amp;&amp; let[i].size() &gt; let[i + <span class="number">1</span>].size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    G.findSCC();</span><br><span class="line">    <span class="comment">//G.print();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;k-sat问题&quot;&gt;&lt;a href=&quot;#k-sat问题&quot; class=&quot;headerlink&quot; title=&quot;k-sat问题&quot;&gt;&lt;/a&gt;k-sat问题&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;p&gt;给定若干集合，每个集合有若干元素，每个集合元素个数不超过k个。&lt;br&gt;给出从每个集合中选取元素的约束条件以及目标方案，判可行性。若可行，求可行解。&lt;/p&gt;
&lt;p&gt;当k=1时，每个集合中元素的个数至多为1，问题的答案显而易见。&lt;br&gt;当k=2时，假定每个集合中元素有且仅有2个，且2个元素不允许同时被取出，即为2-sat问题的一般情景。&lt;br&gt;当k&amp;gt;=3时，k-sat问题是NP-Complete问题，无法在多项式时间内解决，不作讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="2-sat" scheme="http://yoursite.com/tags/2-sat/"/>
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>强连通分量</title>
    <link href="http://yoursite.com/2019/05/27/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <id>http://yoursite.com/2019/05/27/强连通分量/</id>
    <published>2019-05-27T15:31:01.000Z</published>
    <updated>2019-08-02T07:32:38.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特殊的图存储结构"><a href="#特殊的图存储结构" class="headerlink" title="特殊的图存储结构"></a>特殊的图存储结构</h2><h3 id="前向星"><a href="#前向星" class="headerlink" title="前向星"></a>前向星</h3><p>前向星是一种特殊的边集数组，其中存储着每一条边的起点、终点、权值。<br>借助head数组构造前向星之前，必须将每一条边按起点从小到大排序(如果起点相同就按终点从小到大排序)，时间复杂度较高。</p><h3 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h3><p>在前向星的基础上，向边集数组中引入next属性，代表与当前边同起点的下一条边的存储位置，以避免排序。<br>链式前向星与邻接表类似，不同之处在于，邻接表越先输入的边离结点越近而越早遍历，而链式前向星越先输入的边离结点越远而越晚遍历。</p><a id="more"></a><h2 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于深度优先遍历思想。</p><ol><li>将有向图中寻找强连通分量转化为搜索树中寻找搜索子树</li><li>引入数组dfn，作为某点的时间戳(搜索次序编号)</li><li>引入数组low，作为某点在搜索树中最小搜索子树的根结点</li><li>遍历每一个顶点，借助栈记录顶点访问顺序</li><li>遍历链式前向星每一条边，记边的起点为u，终点为v</li><li>如果顶点v未被访问，继续搜索，搜索结束后，low[u]=min(low[u],low[v])</li><li>如果顶点v已被访问并且顶点u还在栈内，low[u]=min(low[u],dfn[v])</li><li>如果dfn[u]=low[u]，则顶点u为强连通分量的根结点，将v退栈直到u=v</li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于求解有向图中的所有强连通分量。</p><p><a href="http://codeforces.com/contest/427/problem/C" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定有向图，并给出每个顶点的权值。求通过顶点将所有强连通分量联系在一起的最小代价和对应方案数。</p><p><strong>题解</strong>：Tarjan算法模板题。将所有强连通分量联系在一起，即寻找每个强连通分量中权值最小的顶点，并求它们的和。权值最小的顶点每重复出现一次，对应方案数就会加一，运用乘法计数原理可求得对应方案数。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w[N], sum, total = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N * <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="keyword">int</span> low[N];</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int SCCNum;</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt; SCC[N];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void print();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//SCCNum = 0;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        low[i] = <span class="number">0</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[i].to = v;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">' '</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Tarjan(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    low[u] = dfn[u] = ++tot;</span><br><span class="line">    st.push(u);</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            Tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="comment">//SCCNum++;</span></span><br><span class="line">        <span class="keyword">int</span> minn = INF, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            vis[v] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (minn &gt; w[v]) &#123;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">                minn = w[v];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minn == w[v]) &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//SCC[SCCNum].push_back(v);</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">        sum += minn;</span><br><span class="line">        total = total * k % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void Graph::print()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; SCCNum &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= SCCNum; i++) &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; SCC[i].size(); j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; SCC[i][j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.findSCC();</span><br><span class="line">    <span class="comment">//G.print();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kosaraju算法"><a href="#Kosaraju算法" class="headerlink" title="Kosaraju算法"></a>Kosaraju算法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于深度优先遍历思想。</p><ol><li>首先对原图进行dfs并将出栈顺序逆序得到拓扑序列</li><li>然后将原图的每一条边反向得到反图，按照步骤(1)生成的拓扑序列顺序对反图进行dfs染色，染成同色的子图就是一个强连通分量</li><li>如果把每个强连通分量缩点，并按每个强连通分量求得的顺序标记缩点，那么这个顺序就是强连通分量缩点后形成的DAG的拓扑序列</li></ol><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于求解有向图中的所有强连通分量。</p><p><a href="http://poj.org/problem?id=2186" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：给定有向图。问你有多少个点可以被其他所有点访问到。</p><p><strong>题解</strong>：Kosaraju算法模板题。正反两次dfs找到所有强连通分量后，将每个强连通分量缩点染色，然后统计每个缩点的出度。若有且只有一个出度为0的缩点，则答案为该缩点所对应的强连通分量中顶点的个数，否则答案为0。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits\stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N * <span class="number">5</span>];</span><br><span class="line">    node redge[N * <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line">    <span class="keyword">int</span> rhead[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line">    <span class="keyword">int</span> color[N];</span><br><span class="line">    <span class="keyword">int</span> outDegree[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> SCCNum;</span><br><span class="line">    <span class="comment">//vector&lt;int&gt; SCC[N];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rdfs</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void print();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    SCCNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        rhead[i] = <span class="number">-1</span>;</span><br><span class="line">        color[i] = <span class="number">0</span>;</span><br><span class="line">        outDegree[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addedge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[i].to = v;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i;</span><br><span class="line"></span><br><span class="line">        redge[i].to = u;</span><br><span class="line">        redge[i].next = rhead[v];</span><br><span class="line">        rhead[v] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!topo.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = topo.top();</span><br><span class="line">        topo.pop();</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            SCCNum++;</span><br><span class="line">            rdfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= vertexNum; u++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (color[u] != color[v]) &#123;</span><br><span class="line">                outDegree[color[u]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, num = <span class="number">-1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= SCCNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!outDegree[i]) &#123;</span><br><span class="line">            tot++;</span><br><span class="line">            num = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tot == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color[i] == num) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::dfs(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    topo.push(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::rdfs(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    color[u] = SCCNum;</span><br><span class="line">    <span class="comment">//SCC[SCCNum].push_back(u);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = rhead[u]; i != <span class="number">-1</span>; i = redge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = redge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            rdfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void Graph::print()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; SCCNum &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= SCCNum; i++) &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; SCC[i].size(); j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; SCC[i][j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addedge();</span><br><span class="line">    G.findSCC();</span><br><span class="line">    <span class="comment">//G.print();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gabow算法"><a href="#Gabow算法" class="headerlink" title="Gabow算法"></a>Gabow算法</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于深度优先遍历思想。</p><ol><li>优化Tarjan算法，利用二号栈取代dfn和low数组求强连通分量的根结点</li><li>遍历有向图每一个顶点，借助一号栈记录顶点访问顺序</li><li>遍历链式前向星每一条边，记边的起点为u，终点为v</li><li>如果顶点v未被访问，继续搜索</li><li>如果顶点v已被访问并且没有被删除，维护二号栈未构成环的结点(即删除二号栈中构成环的结点)</li><li>如果二号栈的顶元素等于u，则顶点u为强连通分量的根结点，将v退栈直到u=v</li></ol><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于求解有向图中的所有强连通分量。</p><p><a href="http://codeforces.com/contest/427/problem/C" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定有向图，并给出每个顶点的权值。求通过顶点将所有强连通分量联系在一起的最小代价和对应方案数。</p><p><strong>题解</strong>：Gabow算法模板题。将所有强连通分量联系在一起，即寻找每个强连通分量中权值最小的顶点，并求它们的和。权值最小的顶点每重复出现一次，对应方案数就会加一，运用乘法计数原理可求得对应方案数。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits\stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w[N], sum, total = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N * <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st2;</span><br><span class="line">    <span class="keyword">int</span> dfn[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int SCCNum;</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt; SCC[N];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findSCC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Gabow</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="comment">//void print();</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//SCCNum = 0;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        dfn[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[i].to = v;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findSCC()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">            Gabow(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">' '</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Gabow(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">    st.push(u);</span><br><span class="line">    dfn[u] = ++tot;</span><br><span class="line">    st2.push(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            Gabow(v);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">            <span class="keyword">while</span> (dfn[st2.top()] &gt; dfn[v]) &#123;</span><br><span class="line">                st2.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st2.top() == u) &#123;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        st2.pop();</span><br><span class="line">        <span class="comment">//SCCNum++;</span></span><br><span class="line">        <span class="keyword">int</span> minn = INF, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//SCC[SCCNum].push_back(v);</span></span><br><span class="line">            <span class="keyword">if</span> (minn &gt; w[v]) &#123;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">                minn = w[v];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minn == w[v]) &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">        sum += minn;</span><br><span class="line">        total = total * k % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void Graph::print()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; SCCNum &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    for (int i = 1; i &lt;= SCCNum; i++) &#123;</span></span><br><span class="line"><span class="comment">        for (int j = 0; j &lt; SCC[i].size(); j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; SCC[i][j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.findSCC();</span><br><span class="line">    <span class="comment">//G.print();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;特殊的图存储结构&quot;&gt;&lt;a href=&quot;#特殊的图存储结构&quot; class=&quot;headerlink&quot; title=&quot;特殊的图存储结构&quot;&gt;&lt;/a&gt;特殊的图存储结构&lt;/h2&gt;&lt;h3 id=&quot;前向星&quot;&gt;&lt;a href=&quot;#前向星&quot; class=&quot;headerlink&quot; title=&quot;前向星&quot;&gt;&lt;/a&gt;前向星&lt;/h3&gt;&lt;p&gt;前向星是一种特殊的边集数组，其中存储着每一条边的起点、终点、权值。&lt;br&gt;借助head数组构造前向星之前，必须将每一条边按起点从小到大排序(如果起点相同就按终点从小到大排序)，时间复杂度较高。&lt;/p&gt;
&lt;h3 id=&quot;链式前向星&quot;&gt;&lt;a href=&quot;#链式前向星&quot; class=&quot;headerlink&quot; title=&quot;链式前向星&quot;&gt;&lt;/a&gt;链式前向星&lt;/h3&gt;&lt;p&gt;在前向星的基础上，向边集数组中引入next属性，代表与当前边同起点的下一条边的存储位置，以避免排序。&lt;br&gt;链式前向星与邻接表类似，不同之处在于，邻接表越先输入的边离结点越近而越早遍历，而链式前向星越先输入的边离结点越远而越晚遍历。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
      <category term="Kosaraju" scheme="http://yoursite.com/tags/Kosaraju/"/>
    
      <category term="Gabow" scheme="http://yoursite.com/tags/Gabow/"/>
    
  </entry>
  
  <entry>
    <title>最优二叉树</title>
    <link href="http://yoursite.com/2019/05/23/%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/05/23/最优二叉树/</id>
    <published>2019-05-23T15:28:25.000Z</published>
    <updated>2019-08-04T04:55:45.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Huffman算法"><a href="#Huffman算法" class="headerlink" title="Huffman算法"></a>Huffman算法</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于贪心思想。</p><ol><li>以权值为w1,w2…wn的n个结点构成n棵二叉树，其中每棵二叉树仅有一个权值为wi的根结点</li><li>选取两颗根结点权值最小的树作为左右子树构造一棵新二叉树，并置新二叉树根结点权值为左右子树上根结点的权值之和</li><li>将合并的两棵二叉树从森林中删除，同时将新二叉树加入森林</li><li>重复步骤(2)和(3)，直到森林中只剩一棵二叉树<a id="more"></a></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><img src="/images/最优二叉树_1.png" style="height: 50%; width: 50%;"><p>给定n个结点的权值，求最优二叉树(注意贪心思想，n个结点权值的给出顺序不同，最终生成的最优二叉树也不同)。</p><p><strong>测试样例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">3 5 7 8 11 14 23 29</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">038-1-1</span><br><span class="line">158-1-1</span><br><span class="line">279-1-1</span><br><span class="line">389-1-1</span><br><span class="line">41110-1-1</span><br><span class="line">51411-1-1</span><br><span class="line">62312-1-1</span><br><span class="line">72913-1-1</span><br><span class="line">881001</span><br><span class="line">9151123</span><br><span class="line">10191248</span><br><span class="line">11291359</span><br><span class="line">124114610</span><br><span class="line">135814711</span><br><span class="line">14100-11213</span><br></pre></td></tr></table></figure><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">        <span class="keyword">int</span> parent;</span><br><span class="line">        <span class="keyword">int</span> l_son;</span><br><span class="line">        <span class="keyword">int</span> r_son;</span><br><span class="line">    &#125;;</span><br><span class="line">    node tree[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Huffman</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span> &amp;, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tree[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        tree[i].parent = <span class="number">-1</span>;</span><br><span class="line">        tree[i].l_son = <span class="number">-1</span>;</span><br><span class="line">        tree[i].r_son = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::update(<span class="keyword">int</span> parent, <span class="keyword">int</span> l_son, <span class="keyword">int</span> r_son)</span><br><span class="line">&#123;</span><br><span class="line">    tree[l_son].parent = parent;</span><br><span class="line">    tree[r_son].parent = parent;</span><br><span class="line">    tree[parent].l_son = l_son;</span><br><span class="line">    tree[parent].r_son = r_son;</span><br><span class="line">    tree[parent].weight = tree[l_son].weight + tree[r_son].weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::select(<span class="keyword">int</span> n, <span class="keyword">int</span> &amp;l_son, <span class="keyword">int</span> &amp;r_son)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].parent == <span class="number">-1</span>) &#123;</span><br><span class="line">            l_son = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[i].parent == <span class="number">-1</span> &amp;&amp; tree[l_son].weight &gt; tree[i].weight) &#123;</span><br><span class="line">            r_son = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[j].parent == <span class="number">-1</span> &amp;&amp; j != l_son) &#123;</span><br><span class="line">            r_son = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[j].parent == <span class="number">-1</span> &amp;&amp; j != l_son &amp;&amp; tree[r_son].weight &gt; tree[j].weight) &#123;</span><br><span class="line">            r_son = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::Huffman(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        select(i, l, r);</span><br><span class="line">        update(i, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::print(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; i;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; tree[i].weight;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; tree[i].parent;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; tree[i].l_son;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; tree[i].r_son &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    Graph G;</span><br><span class="line">    G.Huffman(n);</span><br><span class="line">    G.print(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Huffman算法&quot;&gt;&lt;a href=&quot;#Huffman算法&quot; class=&quot;headerlink&quot; title=&quot;Huffman算法&quot;&gt;&lt;/a&gt;Huffman算法&lt;/h2&gt;&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;基于贪心思想。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以权值为w1,w2…wn的n个结点构成n棵二叉树，其中每棵二叉树仅有一个权值为wi的根结点&lt;/li&gt;
&lt;li&gt;选取两颗根结点权值最小的树作为左右子树构造一棵新二叉树，并置新二叉树根结点权值为左右子树上根结点的权值之和&lt;/li&gt;
&lt;li&gt;将合并的两棵二叉树从森林中删除，同时将新二叉树加入森林&lt;/li&gt;
&lt;li&gt;重复步骤(2)和(3)，直到森林中只剩一棵二叉树
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Huffman" scheme="http://yoursite.com/tags/Huffman/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序与关键路径</title>
    <link href="http://yoursite.com/2019/05/21/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2019/05/21/拓扑排序与关键路径/</id>
    <published>2019-05-21T15:22:26.000Z</published>
    <updated>2019-08-04T04:55:58.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DAG拓扑排序"><a href="#DAG拓扑排序" class="headerlink" title="DAG拓扑排序"></a>DAG拓扑排序</h2><img src="/images/拓扑排序与关键路径_1.png"><ol><li>给定G=&lt;V,E,W&gt;，G为无环有向图，顶点个数为N</li><li>找到G中入度为0的顶点并输出</li><li>删除该点的所有连边，重复步骤(1)，直到G中无入度为0的顶点</li><li>若输出顶点个数小于N，则证明G中有回路，没有关键路径<a id="more"></a></li></ol><h2 id="AOE网关键路径"><a href="#AOE网关键路径" class="headerlink" title="AOE网关键路径"></a>AOE网关键路径</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>定义</strong>：</p><p>AOE网中从起点到终点具有最大路径长度的路径。</p><p><strong>特征属性</strong>：</p><ul><li>事件——AOE网中的顶点</li><li>活动——AOE网中的边</li><li>$ES(i)$和$LS(i)$——事件$i$最早和最晚开始时间</li><li>$EF(i)$和$LF(i)$——事件$i$最早和最晚完成时间</li><li>$ES(i,j)$和$LS(i,j)$——活动$(i,j)$最早和最晚开始时间</li><li>$EF(i,j)$和$LF(i,j)$——活动$(i,j)$最早和最晚完成时间</li><li>$SL(i,j)$——活动$(i,j)$最晚开始(完成)时间与最早开始(完成)时间的差</li></ul><p><strong>公式</strong>：</p><ul><li><p>$ES(1) = 0, ES(i) = max( ES(j) + w_{ji} | &lt;i,j&gt; ∈ E )$</p></li><li><p>$LF(n) = ES(n), LF(i) = min( LF(j) - w_{ij} | &lt;i,j&gt; ∈ E )$</p></li><li><p>$ES(i,j) = ES(i), EF(i,j) = ES(i) + w_{ij}$</p></li><li><p>$LF(i,j) = LF(j), LS(i,j) = LF(j) - w_{ij}$</p></li><li><p>$SL(i,j) = LS(i,j) - ES(i,j) = LF(i,j) - EF(i,j)$</p></li></ul><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li>借助链式前向星建立AOE网</li><li>遍历链式前向星每个结点，找到AOE网的拓扑序列并将其存入栈内，同时更新VE[i]最大值，此过程借助队列实现</li><li>逆拓扑序遍历链式前向星，同时更新VL[i]最小值，此过程借助栈实现</li><li>遍历链式前向星每个结点，计算E[i]和L[i]，若二者相等，则为关键路径上的关键活动</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><img src="/images/拓扑排序与关键路径_2.png"><p>给定AOE网，求关键路径及其长度，注意关键路径可能不止一条(此处略去序列化操作)。</p><p><strong>测试样例</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">9 15</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">1 4 4</span><br><span class="line">2 3 0</span><br><span class="line">2 5 4</span><br><span class="line">3 4 2</span><br><span class="line">3 5 4</span><br><span class="line">3 6 4</span><br><span class="line">4 7 5</span><br><span class="line">5 6 0</span><br><span class="line">5 7 3</span><br><span class="line">5 9 6</span><br><span class="line">6 8 3</span><br><span class="line">7 8 1</span><br><span class="line">8 9 1</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">2 3</span><br><span class="line">3 5</span><br><span class="line">5 9</span><br></pre></td></tr></table></figure><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">    &#125;;</span><br><span class="line">    node edge[N];</span><br><span class="line">    <span class="keyword">int</span> head[N];</span><br><span class="line">    <span class="keyword">int</span> inDegree[N];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line">    <span class="keyword">int</span> VE[N];</span><br><span class="line">    <span class="keyword">int</span> VL[N];</span><br><span class="line">    <span class="keyword">int</span> E[N];</span><br><span class="line">    <span class="keyword">int</span> L[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">topoSort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CriticalPath</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        inDegree[i] = <span class="number">0</span>;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        VE[i] = <span class="number">0</span>;</span><br><span class="line">        VL[i] = <span class="number">0</span>;</span><br><span class="line">        E[i] = <span class="number">0</span>;</span><br><span class="line">        L[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        inDegree[v]++;</span><br><span class="line">        edge[i].to = v;</span><br><span class="line">        edge[i].next = head[u];</span><br><span class="line">        head[u] = i;</span><br><span class="line">        edge[i].w = w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::topoSort()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!inDegree[i])</span><br><span class="line">        &#123;</span><br><span class="line">            q.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        topo.push(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (!--inDegree[v])</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">            VE[v] = max(VE[v], VE[u] + w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::CriticalPath()</span><br><span class="line">&#123;</span><br><span class="line">    topoSort();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; VE[vertexNum] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        VL[i] = VE[vertexNum];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!topo.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = topo.top();</span><br><span class="line">        topo.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].w;</span><br><span class="line">            VL[u] = min(VL[u], VL[v] - w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= vertexNum; u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].w;</span><br><span class="line">            E[i] = VE[u];</span><br><span class="line">            L[i] = VL[v] - w;</span><br><span class="line">            <span class="keyword">if</span> (E[i] == L[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">' '</span> &lt;&lt; v &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.CriticalPath();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DAG拓扑排序&quot;&gt;&lt;a href=&quot;#DAG拓扑排序&quot; class=&quot;headerlink&quot; title=&quot;DAG拓扑排序&quot;&gt;&lt;/a&gt;DAG拓扑排序&lt;/h2&gt;&lt;img src=&quot;/images/拓扑排序与关键路径_1.png&quot;&gt;

&lt;ol&gt;
&lt;li&gt;给定G=&amp;lt;V,E,W&amp;gt;，G为无环有向图，顶点个数为N&lt;/li&gt;
&lt;li&gt;找到G中入度为0的顶点并输出&lt;/li&gt;
&lt;li&gt;删除该点的所有连边，重复步骤(1)，直到G中无入度为0的顶点&lt;/li&gt;
&lt;li&gt;若输出顶点个数小于N，则证明G中有回路，没有关键路径
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Toposort" scheme="http://yoursite.com/tags/Toposort/"/>
    
      <category term="Critical Path" scheme="http://yoursite.com/tags/Critical-Path/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://yoursite.com/2019/05/17/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2019/05/17/最小生成树/</id>
    <published>2019-05-17T15:19:34.000Z</published>
    <updated>2019-08-04T02:19:38.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于贪心思想，借助并查集实现。</p><ol><li>给定G=&lt;V,E,W&gt;，顶点个数为N</li><li>引入集合T，将G中非环边按权从小到大排序，取边e1加入T中</li><li>检查e2与e1是否构成回路，若构成回路则舍弃，否则将e2也加入T中</li><li>重复步骤(3)，直到生成树的边为N-1<a id="more"></a></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于稀疏图找最小生成树。</p><p><a href="http://poj.org/problem?id=1287" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：给定无向带权图G，G中可能存在平行边。问你最小生成树所有边的权值和。</p><p><strong>题解</strong>：Kruskal算法模板题，注意平行边可能权值相同，不要使用set。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">        node(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w) : u(u), v(v), w(w) &#123;&#125;</span><br><span class="line">        node();</span><br><span class="line">        <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a, node b) &#123; <span class="keyword">return</span> a.w &lt; b.w; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">multiset</span>&lt;node&gt; edge;</span><br><span class="line">    <span class="keyword">int</span> pre[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Graph::find(<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::unite(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x);</span><br><span class="line">    <span class="keyword">int</span> fy = find(y);</span><br><span class="line">    <span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">        pre[fx] = pre[fy];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        edge.insert(node(u, v, w));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Graph::Kruskal()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">multiset</span>&lt;node&gt;::iterator it = edge.begin(); it != edge.end(); it++ <span class="comment">/*auto e : edge*/</span>) &#123;</span><br><span class="line">        node e = *it;</span><br><span class="line">        <span class="keyword">if</span> (unite(e.u, e.v)) &#123;</span><br><span class="line">            minWeight += e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        G.addEdge();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; G.Kruskal() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prime算法"><a href="#Prime算法" class="headerlink" title="Prime算法"></a>Prime算法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于贪心思想，与Dijkstra算法类似。</p><ol><li>给定G=&lt;V,E,W&gt;，顶点个数为N</li><li>引入集合U，从顶点集V中任选一点u作为U中的元素</li><li>从顶点u的邻接点中任选一点v使这两点之间权值最小且不构成回路，将v加入U中</li><li>从顶点v出发，重复步骤(3)，直到U中元素个数为N</li></ol><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于稠密图找最小生成树。</p><p><a href="http://poj.org/problem?id=1287" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：给定无向带权图G，G中可能存在平行边。问你最小生成树所有边的权值和。</p><p><strong>题解</strong>：Prime算法模板题，注意平行边可能权值相同，任选其一即可。</p><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Prim</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            matrix[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="keyword">if</span> (matrix[u][v] &gt; w) &#123;</span><br><span class="line">            matrix[u][v] = w;</span><br><span class="line">            matrix[v][u] = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Graph::Prim()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> dis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        dis[i] = matrix[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    dis[<span class="number">1</span>] = INF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> minWeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; dis[k]) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[k] = <span class="literal">true</span>;</span><br><span class="line">        minWeight += dis[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &gt; matrix[k][j]) &#123;</span><br><span class="line">                dis[j] = matrix[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        G.init();</span><br><span class="line">        G.addEdge();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; G.Prim() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kruskal算法&quot;&gt;&lt;a href=&quot;#Kruskal算法&quot; class=&quot;headerlink&quot; title=&quot;Kruskal算法&quot;&gt;&lt;/a&gt;Kruskal算法&lt;/h2&gt;&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;基于贪心思想，借助并查集实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定G=&amp;lt;V,E,W&amp;gt;，顶点个数为N&lt;/li&gt;
&lt;li&gt;引入集合T，将G中非环边按权从小到大排序，取边e1加入T中&lt;/li&gt;
&lt;li&gt;检查e2与e1是否构成回路，若构成回路则舍弃，否则将e2也加入T中&lt;/li&gt;
&lt;li&gt;重复步骤(3)，直到生成树的边为N-1
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Kruskal" scheme="http://yoursite.com/tags/Kruskal/"/>
    
      <category term="Prim" scheme="http://yoursite.com/tags/Prim/"/>
    
  </entry>
  
  <entry>
    <title>图的最短路径</title>
    <link href="http://yoursite.com/2019/05/14/%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2019/05/14/图的最短路径/</id>
    <published>2019-05-14T15:16:59.000Z</published>
    <updated>2019-08-02T07:25:20.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于广度优先遍历思想和贪心思想。</p><ol><li>给定G=&lt;V,E,W&gt;，指定源点s</li><li>引入集合S和集合U，S用于记录已求出最短路径的顶点以及对应的最短路径长度，U用于记录未求出最短路径的顶点以及该顶点到源点s的距离</li><li>最初S中只有源点s，U中只有除s之外的顶点</li><li>从U中找出路径最短的顶点(U中顶点的路径指s到该顶点的路径)，将其加入到S中，并更新U中的顶点和顶点的路径</li><li>重复步骤(4)，直到遍历完所有顶点<a id="more"></a></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决无负权边的单源最短路径问题。</p><p><a href="http://codeforces.com/contest/601/problem/A" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定无向带权图G，G中无平行边或者自环，也没有负权边。将未连通的两个顶点用虚线相连(此操作后G中实线和虚线的条数之和应为n(n-1)/2)，火车只能走实线，汽车只能走虚线。问你从1开始，分别乘火车和汽车前往n，两种方式都能抵达的最短用时，无解输出-1。</p><p><strong>题解</strong>：Dijkstra算法模板题，各边权值均为1，注意孤立点的情况。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">401</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Dijistra</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::reverse()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                matrix[i][j] = INF;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                matrix[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            matrix[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        matrix[u][v] = <span class="number">1</span>;</span><br><span class="line">        matrix[v][u] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Graph::Dijistra()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">int</span> dis[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        dis[i] = matrix[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, min_dis = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &lt; min_dis) &#123;</span><br><span class="line">                min_dis = dis[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min_dis == INF)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[j] &amp;&amp; dis[j] &gt; dis[k] + matrix[k][j]) &#123;</span><br><span class="line">                dis[j] = dis[k] + matrix[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[vertexNum];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    <span class="keyword">int</span> train = G.Dijistra();</span><br><span class="line">    G.reverse();</span><br><span class="line">    <span class="keyword">int</span> car = G.Dijistra();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (train == INF || car == INF) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; max(train, car);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于动态规划思想。</p><ol><li>给定G=&lt;V,E,W&gt;，顶点个数为N</li><li>引入矩阵M，M中的元素a[i][j]表示顶点i到顶点j的距离，若i和j不相邻，则a[i][j]=∞</li><li>对矩阵M进行N次松弛操作(类似区间DP中添加分割点k)，第k次松弛后a[i][j]将更新为只经过1~k顶点时，顶点i到顶点j的最小距离</li><li>完成N次松弛后，a[i][j]表示经过所有顶点时，顶点i到顶点j的最小距离</li></ol><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决多源最短路径问题。</p><p><a href="http://codeforces.com/contest/295/problem/B" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定无向带权图G，G为连通图。按照一定顺序删除指定点及其所有连边。问你每次删除点之前图中现存任意两点间的距离和。</p><p><strong>题解</strong>：Floyd算法模板题，各边权值任意，注意将删除点逆序存入后离线操作。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">501</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line">    <span class="keyword">int</span> del[N];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        ans[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::floyd()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vertexNum; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; del[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= vertexNum; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= vertexNum; j++) &#123;</span><br><span class="line">                matrix[del[i]][del[j]] = min(matrix[del[i]][del[j]], matrix[del[i]][del[k]] + matrix[del[k]][del[j]]);</span><br><span class="line">                <span class="keyword">if</span> (i &lt;= k &amp;&amp; j &lt;= k) &#123;</span><br><span class="line">                    ans[k] += matrix[del[i]][del[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vertexNum; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    m = n * (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.floyd();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于动态规划思想。</p><ol><li>给定G=&lt;V,E,W&gt;，顶点个数为N，指定源点s</li><li>引入边集S，S中每个元素e有u、v、w三个属性，分别对应边的起点、终点、权值</li><li>对边集S进行N-1次松弛操作后，S中的每个元素e的权值将最小化</li><li>遍历S中的每个元素，若仍存在使得w减小的情况，则表明G中存在负权环</li></ol><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决有负权边的单源最短路径问题。</p><p><a href="http://poj.org/problem?id=3259" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：给定无向带权图G，向G中添加若干条有向负权边。问你G中是否存在负权环。</p><p><strong>题解</strong>：Bellman-Ford算法模板题，注意有向边和无向边要分开讨论。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">501</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">int</span> w;</span><br><span class="line">        node(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w) : u(u), v(v), w(w) &#123;&#125;</span><br><span class="line">        node();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge(<span class="keyword">int</span> add)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum + add; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        edge.push_back(node(u, v, w));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::Bellman_Ford()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dis[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = -edgeNum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = edge.begin(); it != edge.end(); it++ <span class="comment">/*auto e : edge*/</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node e = *it;</span><br><span class="line">            <span class="keyword">if</span> (cnt++ &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e.u] = min(dis[e.u], dis[e.v] + e.w);</span><br><span class="line">                dis[e.v] = min(dis[e.v], dis[e.u] + e.w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[e.v] = min(dis[e.v], dis[e.u] - e.w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = -edgeNum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = edge.begin(); it != edge.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        node e = *it;</span><br><span class="line">        <span class="keyword">if</span> (cnt++ &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[e.u] &gt; dis[e.v] + e.w || dis[e.v] &gt; dis[e.u] + e.w)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[e.v] &gt; dis[e.u] - e.w)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">cin</span> &gt;&gt; T; T &gt; <span class="number">0</span>; T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; w;</span><br><span class="line">        <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">        G.addEdge(w);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (G.Bellman_Ford() ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spfa算法"><a href="#Spfa算法" class="headerlink" title="Spfa算法"></a>Spfa算法</h2><h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>基于广度优先遍历和动态规划思想，对Bellman-Ford算法进行优化。</p><ol><li>给定G=&lt;V,E,W&gt;，顶点个数为N，指定源点s</li><li>引入队列Q，将源点s入队</li><li>队首元素u出队，遍历u的所有出边u-&gt;v进行松弛操作，若此时v不在Q中，则将其入队</li><li>当Q非空时，重复步骤(3)，同时判断元素v入队次数是否大于N-1，若是则表明G中存在负权环</li></ol><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>用于解决有负权边的单源最短路径问题。</p><p><a href="http://poj.org/problem?id=1860" target="_blank" rel="noopener">src: POJ</a></p><p><strong>题意</strong>：给定有向带权图G，若G中某两个顶点之间有边，一定是一对方向相反的有向边，且权值可能不同。问你G中是否存在负权环。</p><p><strong>题解</strong>：Spfa算法模板题，注意负权环和正权环是相对的概念。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> v;</span><br><span class="line">        <span class="keyword">double</span> r;</span><br><span class="line">        <span class="keyword">double</span> c;</span><br><span class="line">        node(<span class="keyword">int</span> v, <span class="keyword">double</span> r, <span class="keyword">double</span> c) : v(v), r(r), c(c) &#123;&#125;</span><br><span class="line">        node();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; edge[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">double</span> ruv, cuv, rvu, cvu;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; ruv &gt;&gt; cuv &gt;&gt; rvu &gt;&gt; cvu;</span><br><span class="line">        edge[u].push_back(node(v, ruv, cuv));</span><br><span class="line">        edge[v].push_back(node(u, rvu, cvu));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::Spfa(<span class="keyword">int</span> s, <span class="keyword">double</span> v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> dis[N];</span><br><span class="line">    <span class="keyword">int</span> cnt[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] = <span class="number">0</span>;</span><br><span class="line">        cnt[i] = <span class="number">0</span>;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = v;</span><br><span class="line">    cnt[s]++;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;node&gt;::iterator it = edge[u].begin(); it != edge[u].end(); it++ <span class="comment">/*auto e : edge[u]*/</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node e = *it;</span><br><span class="line">            <span class="keyword">if</span> (dis[e.v] &lt; (dis[u] - e.c) * e.r)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e.v] = (dis[u] - e.c) * e.r;</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[e.v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(e.v);</span><br><span class="line">                    cnt[e.v]++;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[e.v] &gt; vertexNum - <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, s;</span><br><span class="line">    <span class="keyword">double</span> v;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; v;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.addEdge();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (G.Spfa(s, v) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dijkstra算法&quot;&gt;&lt;a href=&quot;#Dijkstra算法&quot; class=&quot;headerlink&quot; title=&quot;Dijkstra算法&quot;&gt;&lt;/a&gt;Dijkstra算法&lt;/h2&gt;&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;p&gt;基于广度优先遍历思想和贪心思想。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给定G=&amp;lt;V,E,W&amp;gt;，指定源点s&lt;/li&gt;
&lt;li&gt;引入集合S和集合U，S用于记录已求出最短路径的顶点以及对应的最短路径长度，U用于记录未求出最短路径的顶点以及该顶点到源点s的距离&lt;/li&gt;
&lt;li&gt;最初S中只有源点s，U中只有除s之外的顶点&lt;/li&gt;
&lt;li&gt;从U中找出路径最短的顶点(U中顶点的路径指s到该顶点的路径)，将其加入到S中，并更新U中的顶点和顶点的路径&lt;/li&gt;
&lt;li&gt;重复步骤(4)，直到遍历完所有顶点
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="Dijkstra" scheme="http://yoursite.com/tags/Dijkstra/"/>
    
      <category term="Floyd" scheme="http://yoursite.com/tags/Floyd/"/>
    
      <category term="Bellman-Ford" scheme="http://yoursite.com/tags/Bellman-Ford/"/>
    
      <category term="Spfa" scheme="http://yoursite.com/tags/Spfa/"/>
    
  </entry>
  
  <entry>
    <title>图的遍历</title>
    <link href="http://yoursite.com/2019/05/10/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/05/10/图的遍历/</id>
    <published>2019-05-10T14:54:19.000Z</published>
    <updated>2019-08-04T04:55:40.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图的深度优先遍历"><a href="#图的深度优先遍历" class="headerlink" title="图的深度优先遍历"></a>图的深度优先遍历</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><ol><li>给定G=&lt;V,E&gt;，假定初始状态为G中所有顶点均未被访问，以一个未被访问过的顶点为起始点，依次访问各个未被访问的邻接点，直到G中所有和顶点v连通的顶点都被访问。</li><li>若经过(1)的操作后G中尚有其他顶点未被访问，则另选一个未被访问的顶点作为起始点，重复步骤(1)，直到G中所有顶点均被访问。<a id="more"></a></li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="无向图找环"><a href="#无向图找环" class="headerlink" title="无向图找环"></a>无向图找环</h4><p><a href="http://codeforces.com/contest/263/problem/D" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定无向图G，G中每个顶点度数不小于k。要你找到一个长度大于k的环(保证答案存在)。</p><img src="/images/图的遍历_1.png"><p><strong>题解</strong>：考虑深度优先遍历。遍历过程中，对于一条边u-&gt;v:</p><ol><li>vis[v] = 0 表示v未被访问，u-&gt;v是一条树边</li><li>vis[v] = 1 表示v已被访问，但其子孙未被访问完，u-&gt;v是一条后向边(返祖边)</li><li>vis[v] = 2 表示v已被访问，且其子孙已被访问完，u-&gt;v是一条前向边或者横叉边</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> minDegree;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</span><br><span class="line">    <span class="keyword">int</span> dis[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k) : vertexNum(n), edgeNum(m), minDegree(k) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findCircle</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= vertexNum ;i++)&#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        dis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findCircle(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> d = <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[u] == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    dis[u] = d;</span><br><span class="line">    path.push_back(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[v] == <span class="literal">true</span> &amp;&amp; d - dis[v] &gt;= minDegree) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (path[pos] != v) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; d - dis[v] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt;= d; i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; path[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            findCircle(v, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[u] = <span class="number">2</span>;</span><br><span class="line">    path.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m, k)</span></span>;</span><br><span class="line">    G.init();</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.findCircle();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无向图的k着色问题"><a href="#无向图的k着色问题" class="headerlink" title="无向图的k着色问题"></a>无向图的k着色问题</h4><p><a href="https://www.luogu.org/problemnew/show/P2819" target="_blank" rel="noopener">src: luogu</a></p><p><strong>题意</strong>：给定无向图G和颜色种类k。问你用k种颜色对G中所有顶点着色，使得每条边连接的两个顶点着色不同的方案数。</p><p><strong>题解</strong>：考虑深度优先遍历。遍历所有顶点，着色后判重，若重复则回溯，否则继续。</p><p><strong>实现代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="keyword">int</span> colorNum;</span><br><span class="line">    <span class="keyword">int</span> matrix[N][N];</span><br><span class="line">    <span class="keyword">int</span> color[N];</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k) : vertexNum(n), edgeNum(m), colorNum(k) &#123; sum = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">kColoring</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkColor</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sum; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        matrix[u][v] = <span class="number">1</span>;</span><br><span class="line">        matrix[v][u] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Graph::checkColor(<span class="keyword">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == <span class="number">1</span> &amp;&amp; color[i] == color[j])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::kColoring(<span class="keyword">int</span> i = <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; vertexNum) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="comment">/*for (int j = 1; j &lt;= vertexNum; j++) &#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; color[j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; endl;*/</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= colorNum; j++) &#123;</span><br><span class="line">            color[i] = j;</span><br><span class="line">            <span class="keyword">if</span> (checkColor(i)) &#123;</span><br><span class="line">                kColoring(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m, k)</span></span>;</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.kColoring();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; G.getSum() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>给定G=&lt;V,E&gt;，假定初始状态为G中所有顶点均未被访问，以一个未被访问过的顶点为起始点，分别访问各个邻接点的邻接点，直到G中所有和顶点v连通的顶点都被访问。</p><h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><h4 id="无向图找最小字典序"><a href="#无向图找最小字典序" class="headerlink" title="无向图找最小字典序"></a>无向图找最小字典序</h4><p><a href="https://codeforces.com/contest/1106/problem/D" target="_blank" rel="noopener">src: codeforces</a></p><p><strong>题意</strong>：给定无向图G，G中可能存在平行边或者自环。要你找到遍历所有顶点的最小字典序。</p><p><strong>题解</strong>：考虑广度优先遍历。直接使用最小堆，利用标记数组判重即可。</p><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> vertexNum;</span><br><span class="line">    <span class="keyword">int</span> edgeNum;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">    <span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : vertexNum(n), edgeNum(m) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findMinDicOrd</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vertexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::addEdge()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= edgeNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Graph::findMinDicOrd()</span><br><span class="line">&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line">    p.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (!p.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = p.top();</span><br><span class="line">        p.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : edge[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                p.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Graph <span class="title">G</span><span class="params">(n, m)</span></span>;</span><br><span class="line">    G.addEdge();</span><br><span class="line">    G.init();</span><br><span class="line">    G.findMinDicOrd();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图的深度优先遍历&quot;&gt;&lt;a href=&quot;#图的深度优先遍历&quot; class=&quot;headerlink&quot; title=&quot;图的深度优先遍历&quot;&gt;&lt;/a&gt;图的深度优先遍历&lt;/h2&gt;&lt;h3 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;给定G=&amp;lt;V,E&amp;gt;，假定初始状态为G中所有顶点均未被访问，以一个未被访问过的顶点为起始点，依次访问各个未被访问的邻接点，直到G中所有和顶点v连通的顶点都被访问。&lt;/li&gt;
&lt;li&gt;若经过(1)的操作后G中尚有其他顶点未被访问，则另选一个未被访问的顶点作为起始点，重复步骤(1)，直到G中所有顶点均被访问。
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="Algorithm - Graph Theory" scheme="http://yoursite.com/categories/C/Algorithm-Graph-Theory/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
  </entry>
  
</feed>
